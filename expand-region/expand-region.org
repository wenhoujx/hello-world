#+TITLE: Expand Region

* Command =er/expand-region=
All emacers must have used this command. [[https://github.com/magnars/expand-region.el][github link]]
* =er/expand-region=
#+begin_src elisp
(require 'expand-region-core)
(require 'expand-region-custom)
(require 'er-basic-expansions)

;;;###autoload
(defun er/expand-region (arg)
  "Increase selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time."
  (interactive "p")
  (if (< arg 1)
      (er/contract-region (- arg))
    (er--prepare-expanding)
    (while (>= arg 1)
      (setq arg (- arg 1))
      (when (eq 'early-exit (er--expand-region-1))
        (setq arg 0)))
    (when (and expand-region-fast-keys-enabled
               (not (memq last-command '(er/expand-region er/contract-region))))
      (er/prepare-for-more-expansions))))

(eval-after-load 'clojure-mode   '(require 'clojure-mode-expansions))
(eval-after-load 'css-mode       '(require 'css-mode-expansions))
(eval-after-load 'erlang-mode    '(require 'erlang-mode-expansions))
(eval-after-load 'feature-mode   '(require 'feature-mode-expansions))
(eval-after-load 'sgml-mode      '(require 'html-mode-expansions)) ;; html-mode is defined in sgml-mode.el
(eval-after-load 'rhtml-mode     '(require 'html-mode-expansions))
(eval-after-load 'nxhtml-mode    '(require 'html-mode-expansions))
(eval-after-load 'web-mode       '(require 'web-mode-expansions))
(eval-after-load 'js             '(require 'js-mode-expansions))
(eval-after-load 'js2-mode       '(require 'js-mode-expansions))
(eval-after-load 'js2-mode       '(require 'js2-mode-expansions))
(eval-after-load 'js3-mode       '(require 'js-mode-expansions))
(eval-after-load 'latex          '(require 'latex-mode-expansions))
(eval-after-load 'nxml-mode      '(require 'nxml-mode-expansions))
(eval-after-load 'octave-mod     '(require 'octave-expansions))
(eval-after-load 'octave         '(require 'octave-expansions))
(eval-after-load 'python         '(progn
                                    (when expand-region-guess-python-mode
                                      (expand-region-guess-python-mode))
                                    (if (eq 'python expand-region-preferred-python-mode)
                                        (require 'python-el-expansions)
                                      (require 'python-el-fgallina-expansions))))
(eval-after-load 'python-mode    '(require 'python-mode-expansions))
(eval-after-load 'ruby-mode      '(require 'ruby-mode-expansions))
(eval-after-load 'org            '(require 'the-org-mode-expansions))
(eval-after-load 'cc-mode        '(require 'cc-mode-expansions))
(eval-after-load "text-mode"      '(require 'text-mode-expansions))
(eval-after-load 'cperl-mode     '(require 'cperl-mode-expansions))
(eval-after-load 'sml-mode       '(require 'sml-mode-expansions))
(eval-after-load 'enh-ruby-mode  '(require 'enh-ruby-mode-expansions))
(eval-after-load 'subword        '(require 'subword-mode-expansions))
#+end_src
This is pretty much the content from =expand-region.el=.
** function walkthrough
pretty straightforward
- =interactive "p"= the prefix arg is a number
- if prefix arg is less than 1, call =er/contract-region=
- when prefix arg is n and n =gte= 1, =er--expand-region-1= is invoked n times, unless ='early-exit= is returned when =er--expand-region-1= expanded to the whole buffer.
- if =expand-region-fast-keys-enabled= is truthy, and the previous command is not =expand-region=, some preprocess is done to ensure faster later expansions.


reference: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes][interactive codes]]
** all those eval-after-load
whenever a major mode is loaded, loads te corresponding =*-expansions= sub-package.

different language has different syntax-table and semantic meanings for the same char, that's why there is one =*-expansions= per language.

** er
