#+TITLE: DockerFile Mode

* package =dockerfile-mode=
This packge provides the following features:
1. dockerfile syntax highlighting
2. dockerfile indentation
3. dockerfile compilation

** disclaimer
I don't actually use this mode directly, but i use other packages rely on this one.
It's maintained by =spotify=, so it should be of good code quality and fun to read and learn.

* =auto-mode-list=
=auto-mode-alist= is a alist =(regex . major-mode)= see [[https://www.emacswiki.org/emacs/AutoModeAlist][wiki]] here.

the following lines ties dockerfiles to =dockerfile-mode=
#+begin_src elisp
;;;###autoload
(add-to-list 'auto-mode-alist '("/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" .
                                dockerfile-mode))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . dockerfile-mode))
#+end_src
Note that =\'= matches the end of a string, whereas =$= matches the empty string before a newline.

#+begin_src elisp
(s-match "/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" "/Dockerfile.foo")
;; => (/Docker.foo) it's a match
#+end_src
* =define-derived-mode=
this autoload code block defines the =dockerfile-mode= derived =prog-mode=,

it defines
- a syntax table
- a few local vars
- an abbrev table

more on these latter
#+begin_src elisp
;;;###autoload
(define-derived-mode dockerfile-mode prog-mode "Dockerfile"
  "A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}
"
  (set-syntax-table dockerfile-mode-syntax-table)
  (set (make-local-variable 'imenu-generic-expression)
       `(("Stage" dockerfile--imenu-function 1)))
  (set (make-local-variable 'require-final-newline) mode-require-final-newline)
  (set (make-local-variable 'comment-start) "#")
  (set (make-local-variable 'comment-end) "")
  (set (make-local-variable 'comment-start-skip) "#+ *")
  (set (make-local-variable 'parse-sexp-ignore-comments) t)
  (set (make-local-variable 'font-lock-defaults)
       '(dockerfile-font-lock-keywords nil t))
  (setq local-abbrev-table dockerfile-mode-abbrev-table)
  (set (make-local-variable 'indent-line-function) #'dockerfile-indent-line-function))
#+end_src

** =dockerfile-mode-syntax-table=
#+begin_src elisp
(defvar dockerfile-mode-syntax-table
  (let ((table (make-syntax-table)))
    (modify-syntax-entry ?# "<" table)
    (modify-syntax-entry ?\n ">" table)
    (modify-syntax-entry ?' "\"" table)
    (modify-syntax-entry ?= "." table)
    table)
  "Syntax table for `dockerfile-mode'.")
#+end_src

see [[http://ergoemacs.org/emacs/elisp_syntax_table.html][Xah, Elisp: syntax table]] for more details.

The parent =prog-mode= has some syntax chars that need to be changed for dockerfile.
1. =#= means =comment== starts, it's punctuation in =prog-mode=
2. =\= means =comment ends, it's a whitespace in =prog-mode=
3. ='= means =string delimiter=, it's a punctuation in =prog-mode=
4. === means =punctuation=,  it's a symbol in =prog-mode=

examples:
#+begin_src yaml
# this is a comment

# 'foo' is a string in docker file.

# the = sign separates the words
syntax=docker/dockerfile:1
#+end_src

** =make-local-variable=
use =make-local-variable= to make certain vars local to the curreng opening =dockerfile= buffer, so that change their meaning/behavior doesn't change their meaning/behavior in other =non-dockerfile-mode= buffers.

=comment-start=, =comment-end= and =comment-start-skip= affects =comment-region= and =uncomment-region= and other comments related packages. In particular, =comment-start-skip= is at least 1  =#= and any whitespace.


** =imenu-generic-expression=
provides regex for create an imenu
#+begin_quote
List of definition matchers for creating an Imenu index.

Each element of this list should have the form

  (MENU-TITLE REGEXP INDEX [FUNCTION] [ARGUMENTS...])

#+end_quote

** =indent-line-function=
#+begin_src elisp
(defun dockerfile-indent-line-function ()
  "Indent lines in a Dockerfile.

Lines beginning with a keyword are ignored, and any others are
indented by one `dockerfile-indent-offset'."
  (unless (member (get-text-property (point-at-bol) 'face)
                  '(font-lock-comment-delimiter-face font-lock-keyword-face))
    (save-excursion
      (beginning-of-line)
      (skip-chars-forward "[ \t]" (point-at-eol))
      (unless (equal (point) (point-at-eol)) ; Ignore empty lines.
        ;; Delete existing whitespace.
        (delete-char (- (point-at-bol) (point)))
        (indent-to dockerfile-indent-offset)))))
#+end_src
1. ignore keyword and comments at the beginning-of-line
2. otherwise, go to the beginning-of-line, skip whitespace.
3. ignore empty line
4. delete whitespace from beginning-of-line
5. indent =dockerfile-indent-offset=  which is =(or standard-indent 2)=

* More than just syntax highlighting
dockerfile-mode provides more than just syntax highlighting, two more autoload functions that compile the current buffer of a docker file.

See the following sections
* =dockerfile-build-buffer=
#+begin_src elisp
;;;###autoload
(defun dockerfile-build-buffer (image-name &optional no-cache)
  "Build an image called IMAGE-NAME based upon the buffer.

If prefix arg NO-CACHE is set, don't cache the image.
The build string will be of the format:
`sudo docker build --no-cache --tag IMAGE-NAME --build-args arg1.. -f filename directory`"

  (interactive (list (dockerfile-read-image-name) prefix-arg))
  (save-buffer)
    (compilation-start
        (format
            "%s%s%s build %s %s %s -f %s %s"
            (if dockerfile-use-buildkit "DOCKER_BUILDKIT=1 " "")
            (if dockerfile-use-sudo "sudo " "")
            dockerfile-mode-command
            (if no-cache "--no-cache" "")
            (dockerfile-tag-string image-name)
            (dockerfile-build-arg-string)
            (shell-quote-argument (dockerfile-standard-filename
				   (or (file-remote-p (buffer-file-name) 'localname)
				       (buffer-file-name))))
            (shell-quote-argument (dockerfile-standard-filename
				   (or (file-remote-p default-directory 'localname)
				       default-directory))))
    nil
    (lambda (_) (format "*docker-build-output: %s *" image-name))))
#+end_src
1. saves buffer
2. =compilation-start=, afaik this is better than a plain =shell command= b/c it pops a compliation buffer in =compliation mode= with =syntax highlighting= and easier =previous-error= and =next-error= navigation and more
3. run a docker command with =compilation-start=
** =dockerfile-mode-command=
#+begin_src elisp
(defcustom dockerfile-mode-command "docker"
  "Which binary to use to build images."
  :group 'dockerfile
  :type 'string)
#+end_src
straightforward customizeable var to use, make sure =docker= is in your =PATH=, try
#+begin_src sh
which docker
# and see if this prints out the right path for docker executable
#+end_src
** =dockerfile-tag-string image-name=
#+begin_src elisp
(defun dockerfile-tag-string (image-name)
  "Return a --tag shell-quoted IMAGE-NAME string or an empty string if image-name is blank."
    (if (string= image-name "") "" (format "--tag %s " (shell-quote-argument image-name))))
#+end_src
this method returns a string like =--tag <image-name>=, tag a docker with image-name e.g. =test-service= automatically creates a alias. [[https://docs.docker.com/engine/reference/commandline/tag/][doc]] =test-service:latest=
** =dockerfile-build-arg-string=
#+begin_src elisp
(defun dockerfile-build-arg-string ()
  "Create a --build-arg string for each element in `dockerfile-build-args'."
  (mapconcat (lambda (arg) (concat "--build-arg " (shell-quote-argument arg)))
             dockerfile-build-args " "))
#+end_src
=mapconcat= applies the =lambda= to each element in the list to set a list of strings and concat them with a joiner, which in this case is =" "=.
*** =dockerfile-build-args=
#+begin_src elisp
(defcustom dockerfile-build-args nil
  "List of --build-arg to pass to docker build.

Each element of the list will be passed as a separate
 --build-arg to the docker build command."
  :type '(repeat string)
  :group 'dockerfile)
#+end_src
default =nil=, customizeable.
** =dockerfile-standard-filename=
=file= arg is =(buffer-file-name)= in the case when the file is local, and =buffer-file-name= returns the full path.
#+begin_src elisp
(defun dockerfile-standard-filename (file)
  "Convert the FILE name to OS standard.
If in Cygwin environment, uses Cygwin specific function to convert the
file name.  Otherwise, uses Emacs' standard conversion function."
  (if (fboundp 'cygwin-convert-file-name-to-windows)
      (replace-regexp-in-string
       (rx "\\") "\\\\" (cygwin-convert-file-name-to-windows file) t t)
    (convert-standard-filename file)))
#+end_src
get OS standard filename

the reason
#+begin_quote
(defun convert-standard-filename (filename)
  "Convert a standard file's name to something suitable for the OS.
This means to guarantee valid names and perhaps to canonicalize
certain patterns.

FILENAME should be an absolute file name since the conversion rules
sometimes vary depending on the position in the file name.  E.g. c:/foo
is a valid DOS file name, but c:/bar/c:/foo is not.

This function's standard definition is trivial; it just returns
the argument.  However, on Windows and DOS, replace invalid
characters.  On DOS, make sure to obey the 8.3 limitations.
In the native Windows build, turn Cygwin names into native names.

See Info node `(elisp)Standard File Names' for more details."
#+end_quote

* =dockerfile-build-no-cache-buffer=
It calls =dockerfile-build-buffer= with =image-name= and explicit =no-cache == t=.

=interactive= must use =list= for custom args.
#+begin_src elisp
;;;###autoload
(defun dockerfile-build-no-cache-buffer (image-name)
  "Build an image called IMAGE-NAME based upon the buffer without cache."
  (interactive (list (dockerfile-read-image-name)))
  (dockerfile-build-buffer image-name t))
#+end_src

** =dockerfile-read-image-name=
#+begin_src elisp
(defvar dockerfile-image-name-history nil
  "History of image names read by `dockerfile-read-image-name'.")

(defun dockerfile-read-image-name ()
  "Read a docker image name."
  (read-string "Image name: " dockerfile-image-name 'dockerfile-image-name-history))
#+end_src

=read-string= with init-input and history.

nice thing about =read-string= or =read-from-minibuffer= is if given a symbol,it automatically records the history.
#+begin_quote
read-from-minibuffer:

Fifth arg HIST, if non-nil, specifies a history list and optionally
  the initial position in the list.  It can be a symbol, which is the
  history list variable to use, or a cons cell (HISTVAR . HISTPOS).
  In that case, HISTVAR is the history list variable to use, and
  HISTPOS is the initial position for use by the minibuffer history
  commands.  For consistency, you should also specify that element of
  the history as the value of INITIAL-CONTENTS.  Positions are counted
  starting from 1 at the beginning of the list.  If HIST is the symbol
  t, history is not recorded.
#+end_quote
* faces and styles
#+begin_src elisp
(defface dockerfile-image-name
  '((t (:inherit (font-lock-type-face bold))))
  "Face to highlight the base image name after FROM instruction.")

(defface dockerfile-image-alias
  '((t (:inherit (font-lock-constant-face bold))))
  "Face to highlight the base image alias inf FROM ... AS <alias> construct.")

(defvar dockerfile-font-lock-keywords
  `(,(cons (rx (or line-start "onbuild ")
               (group (or "from" "maintainer" "run" "cmd" "expose" "env" "arg"
                          "add" "copy" "entrypoint" "volume" "user" "workdir" "onbuild"
                          "label" "stopsignal" "shell" "healthcheck"))
               word-boundary)
           font-lock-keyword-face)
    (,dockerfile--from-regex
     (1 'dockerfile-image-name)
     (2 'dockerfile-image-alias nil t))
    ,@(sh-font-lock-keywords)
    ,@(sh-font-lock-keywords-2)
    ,@(sh-font-lock-keywords-1))
  "Default `font-lock-keywords' for `dockerfile mode'.")

(set (make-local-variable 'font-lock-defaults)
       '(dockerfile-font-lock-keywords nil t))
#+end_src
This =var= defines the syntax highlighting using =font-lock= high level interafce, with case-insensitive highlighting.

#+begin_quote
font-lock-keywords info:

Each element in a user-level keywords list should have one of these forms:

 MATCHER
 (MATCHER . SUBEXP)
 (MATCHER . FACENAME)
 (MATCHER . HIGHLIGHT)
 (MATCHER HIGHLIGHT ...)
 (eval . FORM)

...later
HIGHLIGHT should be either MATCH-HIGHLIGHT or MATCH-ANCHORED.

...later
MATCH-HIGHLIGHT should be of the form:

 (SUBEXP FACENAME [OVERRIDE [LAXMATCH]])

SUBEXP is the number of the subexpression of MATCHER to be
highlighted.
#+end_quote

the =var= above uses two forms:

- =(MATCHER . FACENAME)= match with regex and highlight with =font-lock-keyword-face=
-  =(MATCHER HIGHLIGHT ...)= match with regex and highlight different groups with different custom faces.

reference: [[http://ergoemacs.org/emacs/elisp_font_lock_mode.html][Xah: Elisp: Font Lock Mode Basics]] and emacs manual.
* default keymap
#+begin_src elisp
(defvar dockerfile-mode-map
  (let ((map (make-sparse-keymap))
        (menu-map (make-sparse-keymap)))
    (define-key map "\C-c\C-b" #'dockerfile-build-buffer)
    (define-key map "\C-c\M-b" #'dockerfile-build-no-cache-buffer)
    (define-key map "\C-c\C-c" #'comment-region)
    (define-key map [menu-bar dockerfile-mode] (cons "Dockerfile" menu-map))
    (define-key menu-map [dfc]
      '(menu-item "Comment Region" comment-region
                  :help "Comment Region"))
    (define-key menu-map [dfb]
      '(menu-item "Build" dockerfile-build-buffer
                  :help "Send the Dockerfile to docker build"))
    (define-key menu-map [dfb]
      '(menu-item "Build without cache" dockerfile-build-no-cache-buffer
                  :help "Send the Dockerfile to docker build without cache"))
    map))

... later
;;;###autoload
(define-derived-mode dockerfile-mode prog-mode "Dockerfile"
  "A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}
"...
#+end_src

apparently that's all it needs to register a =mode-map= with a =major-mode=.

=map= is pretty standard.

=menu-bar= in interesting. it adds a Dockerfile  option to the top menu bar. I can't explain better than [[https://emacs.stackexchange.com/questions/15093/how-to-add-an-item-to-the-menu-bar][this SO answer]]. =:help= makes the commands searchable in help menu option.

as far as i can tell, those [dfc] [dfb] are placeholders that doesn't do anything?

#+begin_quote
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Menu-Example.html][Menu Example:]]

Note the symbols which the bindings are made for; these appear inside square brackets, in the key sequence being defined. In some cases, this symbol is the same as the command name; sometimes it is different. These symbols are treated as function keys, but they are not real function keys on the keyboard. They do not affect the functioning of the menu itself, but they are echoed in the echo area when the user selects from the menu, and they appear in the output of where-is and apropos.


#+end_quote
