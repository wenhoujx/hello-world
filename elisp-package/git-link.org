#+title: git-link walk through

* git-link
** [[https://github.com/sshaw/git-link][github link to the package]]
** A little background
I use this package daily at work to get the github url of the file + line number at point.
** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html][autoload]] -  maker that exports functions and fake the behavior as if the whole file has been loaded.
three are three  autoload functions in git-link
#+begin_src elisp
;;;###autoload
(defun git-link (remote start end) ;; link to file
;;;###autoload
(defun git-link-commit (remote) ;; link to commit
;;;###autoload
(defun git-link-homepage (remote) ;; link to homepage.
#+end_src
** Source of truth about git
This package eventually calls a set of =git= commands to get the information. Depending on where you call the commands, the =default-directory= is automatically set as the working directory.
*** git-link--exec
#+begin_src elisp
(defun git-link--exec(&rest args)
  (ignore-errors
    (with-temp-buffer
      (when (zerop (apply #'process-file "git" nil (current-buffer) nil args))
        (goto-char (point-min))
        (cl-loop until (eobp)
                 collect (buffer-substring-no-properties
                          (line-beginning-position)
                          (line-end-position))
                 do (forward-line 1))))))
#+end_src

**** ignore-errors
returns nil when encounter exception
**** process-file function
This function runs a git command and print output into a buffer

- zerop to check exit code is 0 (success), which is [[https://tldp.org/LDP/abs/html/exit-status.html][bash convention]].
- use apply instead of call =process-file= directly b/c the dynamic list of args, [[https://stackoverflow.com/questions/3862394/when-do-you-use-apply-and-when-funcall][as long as the last parameter is a list]].
- cl-loop collects the output into a list

**** example
#+begin_src elisp
;; this is the same output as git link and collect each line of output as element in a list.
(git-link--exec "remote") ;; => ("origin") since i only have one remote
#+end_src

try out process-file function, this =C-c C-c= should switch you to a buffer with the output of "git remote", make sure this is invoked in a git project.
#+begin_src elisp
(let ((buf (get-buffer-create "test-1")))
  (switch-to-buffer buf)
  (process-file "git" nil (current-buffer) nil "remote"))
#+end_src

** git-link-homepage
This method jumps to the github homepage of the current git project.

I set =(setq git-link-open-in-browser t)= so that this funtion jumps to chrome.
*** interactive
#+begin_src elisp
(interactive (list (git-link--select-remote)))
#+end_src
- it's usually a string, but it  may be a Lisp expression that is not a string; then it should be a form that is evaluated to get a list of arguments to pass to the command.
- it's as if calling this function in java or clang style: =git-link-homepage(...)= where =...= is the computed =list= of args.
*** git-link--select-remote
either read or compute the remote, e.g. =origin=
#+begin_src elisp
(defun git-link--select-remote ()
  (if current-prefix-arg ;; if invoked with C-u
      (git-link--read-remote) ;; read remote from prompt
    (git-link--remote))) ;; compute the default remote
#+end_src

**** git-link--read-remote
#+begin_src elisp
(defun git-link--read-remote ()
  (let ((remotes (git-link--remotes))
	(current (git-link--remote)))
...)
#+end_src
***** git-link--remote

#+begin_src elisp
(git-link--current-branch) ;; => "master"
(git-link--branch-remote "master") ;; => "origin"
(git-link--get-config (format "branch.%s.remote" "master")) ;; calls git get-config
#+end_src

#+begin_src sh
git config --get "branch.master.remote"
# origin
#+end_src

***** git-link--remotes
#+begin_src elisp
(git-link--exec "remote")
#+end_src

***** completing-read
#+begin_src elisp
(completing-read "Pick one: "
		     '(a b c) ;; collection
		     nil ;; predicate
		     t ;; must match one
		     "" ;; initial input
		     nil ;; hist
		     "b")
#+end_src

*** git-link--remote-url
#+begin_src elisp
(git-link--remote-url "origin")
(git-link--parse-remote (git-link--remote-url "origin"))
#+end_src
*** cadr
#+begin_src elisp
(car '(0 1 2))
(cdr '(0 1 2))
(cadr '(0 1 2))
#+end_src

*** git-link--new
#+begin_src elisp
(message "test%20") ;; error
(message "test%%20") ;; single %
#+end_src
